--- rust-1.0.ebuild.orig	2023-10-07 11:10:44.000000000 +0200
+++ rust-1.74.1.ebuild	2023-10-09 19:42:05.921321082 +0200
@@ -229,6 +229,8 @@ pre_build_checks() {
 	eshopts_pop
 	M=$(( $(usex system-bootstrap 0 1024) + ${M} ))
 	M=$(( $(usex doc 256 0) + ${M} ))
+	M=$(( 61000 + ${M} )) #takes 61G so to be sure add wtw else they think it would take, for crazy safety.
+	#current ebuild (29nov2020) took 60mins to compile (mitigations=2) and 60G in /var/tmp/portage (oddly 610M left even tho it was a 64G ext4 zram
 	CHECKREQS_DISK_BUILD=${M}M check-reqs_pkg_${EBUILD_PHASE}
 }
 
@@ -355,6 +357,7 @@ src_configure() {
 		optimize = $(toml_usex !debug)
 		release-debuginfo = $(toml_usex debug)
 		assertions = $(toml_usex debug)
+		ccache = "/usr/bin/ccache"
 		ninja = true
 		targets = "${LLVM_TARGETS// /;}"
 		experimental-targets = ""
@@ -400,10 +403,13 @@ src_configure() {
 		vendor = true
 		extended = true
 		tools = [${tools}]
+		# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose
 		verbose = 2
 		sanitizers = false
 		profiler = $(toml_usex profiler)
 		cargo-native-static = false
+		low-priority = true
+		print-step-timings = true
 		[install]
 		prefix = "${EPREFIX}/usr/lib/${PN}/${PV}"
 		sysconfdir = "etc"
@@ -418,10 +424,16 @@ src_configure() {
 		debug = $(toml_usex debug)
 		debug-assertions = $(toml_usex debug)
 		debug-assertions-std = $(toml_usex debug)
-		debuginfo-level = $(usex debug 2 0)
-		debuginfo-level-rustc = $(usex debug 2 0)
-		debuginfo-level-std = $(usex debug 2 0)
-		debuginfo-level-tools = $(usex debug 2 0)
+
+		debuginfo-level = 2
+		debuginfo-level-rustc = 2
+		debuginfo-level-std = 2
+		debuginfo-level-tools = 2
+		#debuginfo-level = $(usex debug 2 0)
+		#debuginfo-level-rustc = $(usex debug 2 0)
+		#debuginfo-level-std = $(usex debug 2 0)
+		#debuginfo-level-tools = $(usex debug 2 0)
+
 		debuginfo-level-tests = 0
 		backtrace = true
 		incremental = false
@@ -445,8 +457,13 @@ src_configure() {
 		lto = "$(usex lto fat off)"
 		[dist]
 		src-tarball = false
-		compression-formats = ["xz"]
-		compression-profile = "balanced"
+		# Available options: fast, balanced, best
+		compression-profile = "fast"
+		compression-formats = ["none"]
+		#patch made!'none' here means .tar only! or don't set any value here! oldcomments://nvm patch not made! //keep 'gz' here so that 0600_fabricate_neutering_try2_just_tar_not_gz_or_xz_for_rust_1_52_0.patch applies neatly
+		#doneTODO: try compression-formats 'cat'(not valid!) or just make sure it doesn't use any! However list must not be empty! as per https://github.com/rust-lang/rust/blob/abf3ec5b3353be973b18269fcdda76a59743f235/config.toml.example#L696 see: https://github.com/rust-lang/rust-installer/issues/110
+		#missing-tools = false
+		#^ this won't work (either with =false or =true), it fails to compile miri even though USE=-miri due to /var/db/repos/gentoo/profiles/base/package.use.mask:30 so it has to be =true
 	_EOF_
 
 	for v in $(multilib_get_enabled_abi_pairs); do
